() send_message(slice to_address,
        int amount,
        int op,
        int query_id,
        builder payload,
        int send_mode) impure inline {

    var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce
            .store_slice(to_address)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op, 32)
            .store_uint(query_id, 64);

    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }

    send_raw_message(msg.end_cell(), send_mode);
}

() send_message_with_text(slice to_address,
        int amount,
        slice text,
        int send_mode) impure inline {

    var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce
            .store_slice(to_address)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0, 32)
            .store_slice(text);

    send_raw_message(msg.end_cell(), send_mode);
}

_ send_nft(slice nft_address, slice new_owner_address, int forward_amount) impure inline {
    ;; transfer#5fcc3d14 query_id:uint64 new_owner:MsgAddress response_destination:MsgAddress
    ;; custom_payload:(Maybe ^Cell) forward_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)
    ;; = InternalMsgBody;

    int forward_amount_real = 0;
    int mode = 1;
    if (forward_amount == -1) {
        mode = 128;
    } else {
        forward_amount_real = forward_amount;
    }

    send_message(nft_address, ;; to_address
            forward_amount_real, ;; forward_amount
            op::nft::transfer, ;; op code
            0, ;; query id
            begin_cell().store_slice(new_owner_address), ;; payload
            mode); ;; send mode
}

() send_money_back(int msg_value, int fwd_fee, slice text) impure inline_ref {
    ;; Send money back
    int new_fwd_amount = msg_value - fwd_fee - little_gas_amount;
    throw_unless(57, new_fwd_amount > 0);
    send_message_with_text(message_from, new_fwd_amount + fwd_fee, text, 2);
    throw(0);
}

() send_money_or_jettons_back_op(int op, int msg_value, int fwd_fee, slice text) impure inline {
    if (op == op::ft::transfer_notification) {
        ;; TODO: send jettons back
    } else {
        send_money_back(msg_value, fwd_fee, text);
    }
}

() send_money_or_jettons_back_body(slice in_msg_body, int msg_value, int fwd_fee, slice text) impure inline {
    int op = 0;
    if (slice_bits(in_msg_body) >= 32) {
        op = in_msg_body.load_uint(32);
    }

    if (op == op::ft::transfer_notification) {
        ;; TODO: send jettons back
    } else {
        send_money_back(msg_value, fwd_fee, text);
    }
}