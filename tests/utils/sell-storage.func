_ set_fake_data(int price, int royalty, int marketplace_fee, slice limit_address) impure {
    builder  main_data = begin_cell();
    main_data = store_uint(main_data, 1, 8); ;; sell mode
    main_data = store_slice(main_data, nft_address); ;; nft
    main_data = store_slice(main_data, owner_address); ;; owner
    main_data = store_uint(main_data, 0, 2); ;; buyer (addr none)

    builder sell_config = begin_cell();

    ;; Marketplace fee
    sell_config = store_uint(sell_config, marketplace_fee, 16);
    sell_config = store_uint(sell_config, 100, 16);

    ;; Royalty fee
    sell_config = store_uint(sell_config, royalty, 16);
    sell_config = store_uint(sell_config, 100, 16);
    sell_config = store_slice(sell_config, owner_address); ;; royalty beneficiar

    cell sell_config_cell = sell_config.end_cell();
    main_data = store_ref(main_data, sell_config_cell);

    builder price_config = begin_cell();
    price_config = store_uint(price_config, 1, 1); ;; is_ton
    price_config = store_grams(price_config, price); ;; price
    price_config = store_slice(price_config, limit_address); ;; limited sale for specific user
    price_config = store_uint(price_config, 0, 32); ;; limited in time sale
    price_config = store_uint(price_config, 0, 2); ;; addr none - jetton wallet address

    cell price_config_cell = price_config.end_cell();

    main_data = store_ref(main_data, price_config_cell);

    set_data(main_data.end_cell());
}

